<launch>

<arg name="world_file" default="$(find exploration)/maps/maze/maze.world"/>
<arg name="gui" default="true"/>
<arg name="pause" default="true"/>

<!--Gazebo -->
<arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
<arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
<arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
<arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
<arg name="paused" default="false"/>
<arg name="use_sim_time" default="true"/>
<arg name="extra_gazebo_args" default=""/>
<arg name="recording" default="false"/>
<arg name="headless" default="false"/>
<arg name="debug" default="false"/>
<arg name="physics" default="ode"/>
<arg name="verbose" default="false"/>
<arg name="respawn_gazebo" default="false"/>
<arg name="use_clock_frequency" default="false"/>
<arg name="pub_clock_frequency" default="100"/>

<group if="$(arg use_sim_time)">
    <param name="/use_sim_time" value="true" />
</group>

<!-- set command arguments -->
<arg unless="$(arg paused)" name="command_arg1" value=""/>
<arg     if="$(arg paused)" name="command_arg1" value="-u"/>
<arg unless="$(arg recording)" name="command_arg2" value=""/>
<arg     if="$(arg recording)" name="command_arg2" value="-r"/>
<arg unless="$(arg verbose)" name="command_arg3" value=""/>
<arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
<arg unless="$(arg debug)" name="script_type" value="gzserver"/>
<arg     if="$(arg debug)" name="script_type" value="debug"/>

<!-- start gazebo server-->
<group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
</group>
<node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_file)" required="true"/>

<!-- start gazebo client -->
<group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
</group>

<!--END gazebo_ros empty_world.launch-->

<!--BEGIN turtlebot_gazebo kobuki.launch.xml-->
<arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
<param name="robot_description" command="$(arg urdf_file)" />
<node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
    args="-x 14.126242 -y -0.872769 -unpause -urdf -param robot_description -model mobile_base"/>
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"  required="true"/>
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
    args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager"  required="true">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
</node>

<!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
<include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"  required="true">
    <param name="publish_frequency" type="double" value="30.0" />
</node>

<!-- Fake laser -->
<node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
<node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
    args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
</node>

<!-- Gmapping -->
<node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
    <param name="angularUpdate" value="0.1"/>
    <param name="linearUpdate" value="0.1"/>
    <param name="temporalUpdate" value="5.0"/>
    <param name="lskip" value="0.1"/>
    <param name="delta" value="0.01"/>
    <param name="maxURange" value="3.0"/>
    <!--param name="maxRange" value="0.0"/-->
    <param name="gazeboLaserRange" value="4.0"/>
    <param name="minimumScore" value="50.0"/>
    <param name="occ_thresh" value="0.60"/>
    <param name="xmax" value="5.0"/>
    <param name="xmin" value="-5.0"/>
    <param name="ymax" value="5.0"/>
    <param name="ymin" value="-5.0"/>
</node>

<!-- Run the map server with a blank map -->
<node name="map_server" pkg="map_server" type="map_server" args="$(find exploration)/maps/blank_map.yaml"/>

<!-- Move base -->
    <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml">
    <arg name="custom_param_file" value="$(find exploration)/param/allow_unknown.yaml"/>
    <rosparam file="$(find exploration)/param/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find exploration)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find exploration)/param/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find exploration)/param/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find exploration)/param/base_local_planner_params.yaml" command="load"/>
</include>

<!-- Rviz -->
<node name="nav_rviz" pkg="rviz" type="rviz" args="-d $(find exploration)/rviz/nav_mapping.rviz"/>

</launch>